#version 400 core

in vec2 pass_tex_coords;
in vec3 surfaceNormal;
in vec3 toLightVec;
in vec3 toCameraVec;
in float visibility;

out vec4 out_color;

uniform sampler2D textureSampler;
uniform vec3 lightColor;
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColor;

void main(void){

	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitToLight = normalize(toLightVec);
	float nDot1 = dot(unitNormal, unitToLight);
	float brightness = max(0.2, nDot1);
	vec3 diffuse = brightness * lightColor;
	
	vec3 unitVecToCamera = normalize(toCameraVec);
	vec3 lightDirection = - unitToLight;
	vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
	
	float specularAngle = dot(reflectedLightDirection, unitVecToCamera);
	specularAngle = max(0.0, specularAngle);
	float dampedAngle = pow(specularAngle, shineDamper);
	vec3 finalSpecular = dampedAngle * reflectivity * lightColor;
	
	out_color = vec4(diffuse, 1.0) * texture(textureSampler, pass_tex_coords) + vec4(finalSpecular,1.0);
	out_color = mix(vec4(skyColor,1.0),out_color , visibility);
}